1.1 C++简介 

C++融合了3种不同编程方式：C语言代表的过程性语言；C++在C语言基础上添加的类代表的面向对象语言；C++模板支持的泛型语言。 

1.2 C++简史 

C语言：提供结构化编程工具；生成简洁、快速运行的程序；提供处理硬件的能力(如管理通信端口和磁盘处理器)。 

OOP：Object Oriented Programming(面向对象编程)。   

1.2.1 C语言 

1.操作系统：是能够管理计算机资源、处理计算机和用户之间交互的一组程序。 

2.C语言：将低级语言的高效率、硬件访问能力与高级语言的通用性、可移植性融合在一起。 

1.2.2 C语言编程原理 

1.程序=数据+算法 

 数据=程序使用和处理的信息 

 算法：程序使用的方法 

2.C语言具有一种更有序的编程方法的特性：结构化编程(structed programm-ing)将分支限制为一小组行为良好的结构(如for循环、while循环、do while 循环和if else语句)。 

3.自顶向下(top-down)：将大型程序分解为小型、便于管理、易于编写的任务(鼓励程序员开发程序单元(函数)来表示各个任务模块)。 

1.2.3 OOJ 面向对象编程 

1.OOP强调数据，其理念是设计与问题本质相对应的数据格式。 

2.C++中，类是一种规范，它描述了这种新型数据格式，对象是根据这种规范构造的特定数据结构。 

3.OOP程序设计方法首先设计类。类定义描述了对每个类可执行的操作。然后可可以设计一个使用这些类的对象的程序。 

4.从低级组织(类)到高级组织(程序)的过程叫自下向上(bottom-up)编程。 

5.OOP编程不仅仅将数据和方法合并为类定义。例如：①有助于创建可重用代码；②信息隐藏可保护数据；③多态为运算符和函数创建多个定义，通过编程上下文来确定使用哪个定义；④继承能够使用旧类派生出新类。OOP编程引入许多概念，不同于过程性编程，它不是将重点放在任务上而是放在表示概念上。 

3.OOP语言使得程序员可以轻松方便地使用已有的类。C++真正优点之一：可以方便地重用和修改现有的、经过仔细测试的代码。 

1.2.4 C++和泛型编程 

1.泛型编程(generic programming)是C++支持的另一种编程模式。 

2.目标：与OOP相同，即使重用代码和抽象通用概念的技术更简单。 

3.侧重点：OOP强调是编程的数据方面；而泛型编程强调的是独立与特定数据类型。OOP是一个管理大型项目的工具，而泛型编程提供了执行常见任务(对数据排序或合并链表)的工具。 

4.术语泛型(generic)指的是创建独立于类型的代码。C++数据表示具有多种类型—整数、小数、字符、字符串、用户定义的、由多种类型组成的复合结构。泛型编程需要对语言进行扩展，可以只编写一个泛型函数，并将其用于各种实际类型。C++模板提供了完成这种任务的机制。 

1.2.5 C++起源 

C++融合了OOP、泛型编程和传统的过程性方法。强调实用价值。 

1.3 可移植性和标准 

1.4 程序创建的技巧 

1.使用文本编辑器编写程序，并将其保存到文件中，这个文件就是程序的源代码。 

2.编译源代码。运行一个程序，将源代码翻译为主机使用的内部语言—机器语言。包含了翻译后的程序的文件就是程序的目标代码(Object code)。 

3.将目标代码与其他代码链接起来。链接指的是将目标代码同使用的函数的目标代码以及一些标准的启动代码(startup code)组合起来，生成程序的运行阶段版本。包含最终程序的代码称为可执行文件。 

1.5 总结 

1.C语言新增诸如控制结构和函数等特性，以便更好地控制程序流程，支持结构化和模块化程度更高的办法。 

2.C++中增加了面向对象编程和泛型编程的支持，有助于提高模块化和创建可重用代码，从而节省编程时间并提高程序的可靠性。 

3.程序创建在IDE(integrated development environments)中,它提供了用于创建源代码的文本编辑器、用于生成可执行文件的编译器和链接器以及其他资源，如项目管理与调试功能。 

 

 

 

 

 

 

 

 

  

  

 

 
